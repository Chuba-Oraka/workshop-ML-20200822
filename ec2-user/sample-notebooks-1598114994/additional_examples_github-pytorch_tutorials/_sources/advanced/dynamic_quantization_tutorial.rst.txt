.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'with' b'<unk>' b'kills' b'controllers' b'as' b'a' b'rape' b'stages' b'within' b'21' b',' b'but' b'only' b'in' b'subsequent' b'houses' b',' b'also' b'sing' b'in'
    b'size' b',' b'<unk>' b',' b'it' b'had' b'recently' b'been' b'turned' b'it' b'to' b'death' b';' b'one' b'emerged' b'at' b'Agriculture' b'was' b'similar' b'to'
    b'a' b'<unk>' b'or' b'<unk>' b'back' b',' b'allowing' b'it' b'to' b'have' b'them' b'by' b'SPECTRE' b'.' b'employed' b'after' b',' b'on' b'the' b'951'
    b'side' b'reprising' b'by' b'Bobby' b'Brown' b',' b'Oliver' b'H.' b'Mitchell' b'has' b'a' b'user' b'suspect' b'to' b'discover' b'every' b'bowler' b'.' b'Other' b'study'
    b'are' b'still' b'because' b'they' b'permit' b'in' b'oxide' b';' b'the' b'racing' b'scene' b'was' b'Barco' b',' b'and' b'Varpas' b'scored' b'interests' b'to' b'produce'
    b',' b'and' b'"' b'they' b'have' b'<unk>' b'this' b'name' b',' b'it' b"'s" b'isn' b"'t" b'gone' b'more' b'like' b'[' b'<unk>' b']' b'Dardanelles'
    b'of' b'nor' b'yet' b'of' b'45' b'%' b',' b'you' b'is' b'...' b'under' b'physics' b'"' b',' b'omnivorous' b'them' b'sometimes' b'point' b'the' b'mail'
    b"'s" b'condition' b'for' b'Alaska' b'and' b'-' b'shaken' b'his' b'<unk>' b'as' b'produce' b'that' b'to' b'ensure' b'to' b'stick' b',' b'a' b'unusual' b'poem'
    b'or' b'creations' b',' b'switch' b'back' b'.' b'The' b'quotations' b'on' b'a' b'Palmyra' b'star' b'"' b'not' b'assumed' b"'" b'sticking' b'Spring' b'by' b'00'
    b'@-@' b'seam' b'tribe' b'affairs' b'teacher' b'@-@' b'translucent' b'is' b'an' b'more' b'debated' b'"' b'when' b'these' b'would' b'be' b'built' b'.' b'Connecticut' b'continued'
    b'for' b'a' b'half' b'at' b'110' b':' b'34' b'million' b'development' b'him' b'has' b'caused' b'to' b'Saturn' b',' b'with' b'young' b'long' b'subjects' b'ACE'
    b'as' b'outside' b'by' b'the' b'Commission' b',' b'during' b'me' b'as' b'Lady' b'FISA' b'.' b'The' b'election' b'is' b'anthology' b',' b',' b'serving' b'as'
    b'an' b'monastery' b',' b'who' b'makes' b'the' b'introduction' b'to' b'a' b'<unk>' b'take' b'by' b'<unk>' b'Mexican' b',' b'Max' b'and' b'John' b'Brat' b'('
    b'1813' b'Izumo' b'Seymour' b'<unk>' b')' b'.' b'They' b'suggests' b':' b'"' b'rotten' b'mean' b'a' b'luxurious' b'with' b'a' b'good' b'quotation' b'"' b'('
    b'<unk>' b'<unk>' b')' b'no' b'whom' b'a' b'planet' b'who' b'must' b'have' b'assume' b'hours' b'instantly' b'for' b'them' b'.' b'In' b'a' b'hour' b'('
    b'after' b'1896' b'seasonally' b')' b',' b'the' b'film' b'himself' b'does' b'not' b'select' b'C' b',' b'arose' b'to' b'their' b'head' b'power' b'for' b'a'
    b'live' b',' b'Lang' b'through' b'Re8' b'in' b'the' b'form' b';' b'the' b'emotions' b'kakapo' b'approximate' b'the' b'possibility' b'for' b'Kyra' b'made' b'behind' b'proceeding'
    b'to' b'communities' b'.' b'In' b'a' b'female' b'Cedar' b'Me' b'moves' b'describes' b'of' b'sale' b',' b'yesterday' b'moves' b'its' b'female' b',' b'and' b'defected'
    b'to' b'her' b'punishment' b'.' b'<unk>' b'and' b'the' b'<unk>' b'=' b'O' b'\xe2\x80\x99' b't' b'<unk>' b'wonder' b"'s" b'large' b'Rookie' b'of' b'Solar' b'Age'
    b'representative' b'of' b'paths' b'used' b'into' b'propeller' b'Palisades' b',' b'who' b'left' b'O' b"'Malley" b',' b'"' b'he' b'left' b'a' b'depth' b',' b'<unk>'
    b'you' b'exclaim' b'even' b'take' b'for' b'entrenched' b'.' b"'" b'<eos>' b'<unk>' b'I' b'only' b'attempted' b'them' b'on' b'being' b'probably' b'sometimes' b'Christ' b'.'
    b'"' b'The' b'asteroid' b'language' b'is' b'often' b'attributed' b'to' b'maintain' b'the' b'type' b'justice' b'to' b'<unk>' b'and' b'his' b'short' b'descriptions' b'.' b'<eos>'
    b'<eos>' b'=' b'=' b'Power' b'video' b'=' b'=' b'<eos>' b'<eos>' b'As' b'a' b'elderly' b',' b'full' b'astronomer' b'Prize' b'granted' b'it' b'a' b'36'
    b'@-@' b'term' b'curiosity' b'such' b'as' b'090' b',' b'a' b'rape' b'six' b'@-@' b'disk' b'Beltline' b'<unk>' b'capable' b'of' b'<unk>' b'at' b'the' b'Toro'
    b'interface' b'police' b'quest' b'.' b'The' b'plane' b'assumed' b'him' b'to' b'be' b'moved' b'into' b'thoroughly' b'countries' b'to' b'his' b'eternal' b'or' b'full' b'number'
    b'livelihood' b'in' b'Crabble' b',' b'Winterbottom' b',' b'The' b'<unk>' b',' b'Tarrytown' b'<unk>' b'and' b'sacramental' b'villages' b'.' b'"' b'The' b'One' b'large' b'Ain'
    b'Trek' b'has' b'a' b'fitness' b'...' b'the' b'king' b'is' b'a' b'kind' b'of' b'cheap' b'players' b"'" b'childhood' b',' b'something' b'giving' b'the' b'voice'
    b'that' b'driving' b'of' b'Faith' b'and' b'stylistic' b'responses' b'in' b'trying' b'that' b'less' b'in' b'any' b'game' b'.' b'"' b'<eos>' b'Garc\xc3\xada' b'Macrianus' b'Bhai'
    b'plays' b'it' b'by' b'the' b'death' b'of' b'the' b'book' b'in' b'2004' b'but' b'it' b'is' b'made' b'to' b'be' b'made' b'an' b'study' b'for'
    b'thicket' b'.' b'However' b',' b'however' b'they' b'are' b'<unk>' b',' b'the' b'R\xc3\xa9union' b'effect' b'of' b'letting' b'Mars' b'as' b'"' b'they' b'cannot' b"'t"
    b'be' b'probably' b'sufficiently' b'flattened' b'and' b'truck' b'.' b'When' b'you' b'smell' b'his' b'regimes' b'for' b'being' b'a' b'intelligence' b',' b'a' b'pure' b'star'
    b'including' b'there' b'is' b'a' b'starter' b'Valkyria' b'"' b'.' b'His' b'small' b'name' b'is' b'possible' b'to' b'examine' b'.' b'<eos>' b'By' b'1982' b'teams'
    b'Harry' b"'s" b'another' b'year' b'was' b'lacking' b'as' b'more' b'much' b'cognitive' b'actions' b'and' b'said' b'that' b'the' b'"' b'lips' b'input' b'interactions' b'"'
    b'.' b'This' b'could' b'be' b'classified' b'as' b'Hasted' b'and' b'<unk>' b',' b'greatly' b'because' b'Simone' b'was' b'also' b'at' b'you' b'.' b'A' b'demoted'
    b',' b'sharing' b'Ray' b'@-@' b'Europos' b'such' b'as' b'North' b'Africa' b'and' b'Norway' b'by' b'Colman' b'der' b'<unk>' b'have' b'long' b'"' b'embryos' b'for'
    b'personal' b',' b'agricultural' b'and' b'<unk>' b'plea' b'"' b'.' b'A' b'1976' b'series' b'of' b'Music' b'is' b'a' b'primary' b'resident' b'in' b'Australian' b'Sea'
    b'messages' b',' b'with' b'kg' b'rooms' b',' b'nine' b'eyes' b'than' b'the' b'Republic' b'or' b'Ulster' b'(' b'northwestern' b',' b'relative' b'meaning' b')' b','
    b'delivery' b':' b'<eos>' b'ambiguous' b'amidst' b'it' b'an' b'<unk>' b'model' b';' b'person' b"'s" b'strength' b'fit' b'.' b'<eos>' b'Like' b'other' b'real' b','
    b'mostly' b'due' b'to' b'<unk>' b',' b'the' b'Endangered' b'differentiation' b'is' b'representing' b'conformational' b',' b'letting' b'silt' b',' b'one' b'of' b'the' b'island' b'compete'
    b'upon' b'spelled' b'a' b'flocks' b'throughout' b'the' b'world' b'.' b'A' b'female' b'@-@' b'bearing' b'in' b'<unk>' b'salts' b'is' b'estimated' b'in' b'present' b'lines'
    b'.' b'Like' b'instance' b',' b'when' b'traces' b'of' b'flies' b'are' b'free' b',' b'they' b'can' b'be' b'<unk>' b'.' b'<eos>' b'For' b'example' b','
    b'young' b'reproductive' b'languages' b'is' b'a' b'pattern' b'@-@' b'linear' b'neoceratopsian' b'"' b'slower' b'"' b',' b'but' b'if' b'the' b'eggs' b'will' b'be' b'found'
    b'so' b'dancing' b'away' b'or' b'their' b'reproductive' b'nature' b'.' b'<unk>' b',' b'the' b'Boat' b'Power' b'rite' b',' b'who' b'do' b'not' b'receptive' b'<unk>'
    b',' b'used' b'(' b'present' b',' b'R\xc3\xa9union' b')' b',' b'146' b'or' b'seven' b'\xe2\x80\x93' b'longer' b'females' b',' b'fool' b'III' b'and' b'somewhat' b'sacred'
    b'9' b'inches' b'(' b'34' b'to' b'0' b'@.@' b'8' b'mi' b')' b'.' b'Its' b'push' b'between' b'Mars' b'and' b'gray' b'2' b'or' b'5'
    b'others' b',' b'apart' b'by' b'one' b'promises' b'probably' b',' b'with' b'other' b'<unk>' b'violations' b',' b'grey' b',' b'and' b'<unk>' b'mandible' b',' b'whose'
    b'longest' b'head' b'(' b'seated' b'below' b'and' b'one' b'theoretical' b')' b'is' b'rarely' b'a' b'individual' b'toe' b'along' b'by' b'the' b'head' b'of' b'equal'
    b',' b'by' b'The' b'island' b'of' b'her' b'refinement' b'.' b'They' b'of' b'long' b'symbols' b',' b'or' b'gregarious' b'calls' b'all' b'choir' b'bright' b'disturbing'
    b',' b'bacteria' b',' b'and' b'decorated' b'herding' b'brown' b',' b'perhaps' b'fly' b',' b'anti' b'@-@' b'spored' b'around' b'down' b'or' b'<unk>' b'on' b'red'
    b'eggs' b'.' b'Such' b'in' b'the' b'starling' b',' b'long' b',' b'black' b',' b'are' b'the' b'timely' b'warrior' b'when' b'Syria' b'appears' b'down' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 221.8
    loss: 5.168
    elapsed time (seconds): 150.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  17.316 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
